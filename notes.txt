
Using the "shunting yard" algorithm when parsing an expression. Unsolved 
expressions are stored in RPN for resolution at runtime.

Need to create unit tests and a test framework. Testing framework will be a set
of macros for asserting and a test main that uses them. THe test main() will 
include the C files, rather than the headers to allow access to static data. If 
a test needs a different set of mocks or stubs, then it will need to be in a 
separate executable. A big test main() will aggrigate tests and run them, 
reporting errors as needed. A unit test file can only include the code that is
under test. Every other function call must be a mock or a stub. Mocks and stubs
are individually kept in a single file and they are included via the test file 
header. 
??Each test has a data structure at the end that specifies the tests in 
the file. The tests are run via a macro. The main test runner searches the
directory for executables named test_* and runs each one as a test.

Add functionality to file_io.c so that the tokens can be read from a string. To
support interractive parsing.

Resolve the design issue with symbol attributes being saved. Do I keep them in 
an array or a hash? Do I need to store more than one of the same type?

Change VRET macro to print values in addition to the var returned.

Need to use a documentation framework.
